import objects.ABotPixel;
import flixel.FlxG;

class NenePixel extends CharacterInfoBase
{

	public function new(){
		super();

		includeInCharacterList = false;
		includeInGfList = true;

		info.name = "nene";
		info.spritePath = "week6/nenePixel";
		info.frameLoadType = setSparrow();
		info.antialiasing = false;
		info.iconName = "face";
		info.focusOffset.set(50, 0);

		addByIndices("danceLeft", offset(0, 0), "idle", [0,1,2,3,4,5,6,7,8,9,10,11,12,13], "", 24, loop(false, 0), false, false);
		addByIndices("danceRight", offset(0, 0), "idle", [14,15,16,17,18,19,20,21,22,23,24,25,26,27], "", 24, loop(false, 0), false, false);
		addByPrefix("raiseKnife", offset(-2, 10), "raise", 24, loop(false, 0), false, false);
		addByIndices("idleKnife", offset(-21, 10), "blink", [0,1,2,3,4,5], "", 24, loop(false, 0), false, false);
		addByIndices("idleKnifeEnd", offset(-2, 10), "blink", [6,7], "", 24, loop(false, 0), false, false);
		addByIndices("lowerKnife", offset(-2, 10), "lower", [0,1,2,3,4,5], "", 24, loop(false, 0), false, false);

		addAnimChain("raiseKnife", "idleKnife");
		addAnimChain("idleKnife", "idleKnifeEnd");

		info.idleSequence = ["danceLeft", "danceRight"];

		info.functions.create = create;
		info.functions.songStart = songStart;
		info.functions.songEnd = songEnd;
		info.functions.update = update;
		info.functions.beat = beat;
		info.functions.countdownBeat = countdownBeat;
		info.functions.danceOverride = danceOverride;

		addExtraData("reposition", [0, -168]);
		addExtraData("scale", 6);
		addExtraData("dropShadowMask", "week6/weeb/erect/masks/nenePixel_mask");
		addExtraData("dropShadowMaskThreshold", 1);
	}

	var knifeRaised:Bool = false;
	var blinkTime:Float = 0;

	var abot:ABot;
	var abotLookDir:Bool = false;

	var BLINK_MIN:Float = 1;
	var BLINK_MAX:Float = 3;

	function create(character:Character):Void{
		abot = new ABotPixel(296, 430);
		abot.lookLeft();
		addToCharacter(abot);
	}

	function update(character:Character, elapsed:Float):Void{

		if(ScriptingUtil.startsWith(character.curAnim, "idleKnife")){
			blinkTime -= elapsed;

			if(blinkTime <= 0){
				character.playAnim("idleKnife", true);
				blinkTime = FlxG.random.float(BLINK_MIN, BLINK_MAX);
			}
		}

		if(!character.debugMode){
			if(playstate.camFocus == "dad" && abotLookDir){
				abotLookDir = !abotLookDir;
				abot.lookLeft();
			}
			else if(playstate.camFocus == "bf" && !abotLookDir){
				abotLookDir = !abotLookDir;
				abot.lookRight();
			}
		}
		
	}

	var skipBop:Bool = false;

	function beat(character:Character, beat:Int) {
		//raise knife on low health
		skipBop = false;
		if(PlayState.SONG.song.toLowerCase() != "blazin"){
			if(PlayState.instance.health < 0.4 && !knifeRaised){
				knifeRaised = true;
				blinkTime = FlxG.random.float(BLINK_MIN, BLINK_MAX);
				character.playAnim("raiseKnife", true);
			} 
			else if(PlayState.instance.health >= 0.4 && knifeRaised && (ScriptingUtil.startsWith(character.curAnim, "idleKnife") || character.curAnim == "sad")){
				knifeRaised = false;
				character.playAnim("lowerKnife", true);
				character.idleSequenceIndex = 0;
				character.danceLockout = true;
				skipBop = true;
			}
		}

		if(!knifeRaised && !skipBop){
			abot.bop();
		}
	}

	function countdownBeat(character:Character, beat:Int) {
		abot.bop();
	}

	function danceOverride(character:Character):Void{
		if(!knifeRaised){
			character.defaultDanceBehavior();
		}
	}

	function songStart(character:Character):Void{
		abot.setAudioSource(FlxG.sound.music);
		abot.startVisualizer();
	}

	function songEnd(character:Character):Void{
		abot.visualizer.alpha = 0;
	}

}